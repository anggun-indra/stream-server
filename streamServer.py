# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _streamServer
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class StreamServerError:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamServerError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamServerError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _streamServer.new_StreamServerError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamServer.delete_StreamServerError
    __del__ = lambda self : None;
StreamServerError_swigregister = _streamServer.StreamServerError_swigregister
StreamServerError_swigregister(StreamServerError)

class StreamServerRunError:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamServerRunError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamServerRunError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _streamServer.new_StreamServerRunError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamServer.delete_StreamServerRunError
    __del__ = lambda self : None;
StreamServerRunError_swigregister = _streamServer.StreamServerRunError_swigregister
StreamServerRunError_swigregister(StreamServerRunError)

class StreamServerNameError:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamServerNameError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamServerNameError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _streamServer.new_StreamServerNameError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamServer.delete_StreamServerNameError
    __del__ = lambda self : None;
StreamServerNameError_swigregister = _streamServer.StreamServerNameError_swigregister
StreamServerNameError_swigregister(StreamServerNameError)

class StreamServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamServer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _streamServer.new_StreamServer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _streamServer.delete_StreamServer
    __del__ = lambda self : None;
    __swig_getmethods__["port"] = _streamServer.StreamServer_port_get
    if _newclass:port = _swig_property(_streamServer.StreamServer_port_get)
    def addMP3(*args): return _streamServer.StreamServer_addMP3(*args)
    def addMPEGVideo(*args): return _streamServer.StreamServer_addMPEGVideo(*args)
    def addMPEG(*args): return _streamServer.StreamServer_addMPEG(*args)
    def run(*args): return _streamServer.StreamServer_run(*args)
    def stop(*args): return _streamServer.StreamServer_stop(*args)
    def remove(*args): return _streamServer.StreamServer_remove(*args)
    def getURL(*args): return _streamServer.StreamServer_getURL(*args)
    def isRunning(*args): return _streamServer.StreamServer_isRunning(*args)
StreamServer_swigregister = _streamServer.StreamServer_swigregister
StreamServer_swigregister(StreamServer)



